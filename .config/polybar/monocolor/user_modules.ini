[module/dunst]
type = custom/ipc
initial = 1
format-padding = 1

hook-0 = echo "%{A1:notify-send "DUNST_COMMAND_PAUSE" && polybar-msg hook dunst 2:}%{F#00f5d4}%{F-} ON%{A}" &
hook-1 = echo "%{A1:notify-send "DUNST_COMMAND_RESUME" && polybar-msg hook dunst 1:}%{F#81a1c1} OFF%{F-}%{A}" &

;=============================================================================;
;=============================================================================;

[module/spotify]
type = custom/script
; Available tokens:
;   %counter%
; Command to be executed (using "/bin/sh -c [command]")
; This script also works with other music players.
; Colors are hardcoded in the script for now.
exec = spotify_status -f "{artist} - {title} - {album}"


; Will the script output continous content?
; Default: false
tail = true

; Available tokens:
;   %output%
; Default: %output%
label = %output:0:72:..%
label-padding = 1

; Available tags:
;   <label> (default)
format = <label>
format-prefix = " "   
format-prefix-foreground = ${colors.primary}

click-left = spotify_status play-pause &
click-right = spotify_status next &
click-middle = spotify_status previous &

; Doesn't seem to work on Spotify.
scroll-up = spotify_status raise &

;=============================================================================;
;=============================================================================;

[module/redshift]
type = custom/script

; Available tokens:
;   %counter%
; Command to be executed (using "/bin/sh -c [command]")
exec = redshiftctl print '#00f5d4'

; Will the script output continous content?
; Default: false
; tail = false

; Seconds to sleep between updates
; Default: 5 (0 if `tail = true`)
interval = 0.5

; Available tags:
;   <output> - deprecated
;   <label> (default)
format = <label>

; Available tokens:
;   %output%
; Default: %output%
label = %output%

; Available tokens:
;   %counter%
;   %pid%
;
; "click-(left|middle|right)" will be executed using "/bin/sh -c [command]"
click-left = redshiftctl toggle

;=============================================================================;
;=============================================================================;

[module/pacman-updates]
type = custom/ipc

; Define the command to be executed when the hook is triggered
; Available tokens:
;   %pid% (id of the parent polybar process)
hook-0 = pacman_updates get

; Hook to execute on launch. The index is 1-based.
; Default: 0
initial = 1

; Available tags:
;   <output> (default)
format = <output>
format-prefix-foreground = ${colors.primary}
format-prefix = " "

label = %output%
label-padding = 1

; Mouse actions
; Available tokens:
;   %pid% (id of the parent polybar process)
click-left = polybar-msg hook pacman-updates 1
click-right = pacman_updates show

;=============================================================================;
;=============================================================================;